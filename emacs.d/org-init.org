#+STARTUP: overview
* Id
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Marc Jou"
        user-mail-address "smyslov@gmail.com"
        user-github "https://github.com/senyorjou")
#+END_SRC
* Basics
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq delete-auto-save-files t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode 1)

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; ESC as a better C-g
  ;;(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; line numbers
  (global-display-line-numbers-mode 1)
  ;; but not everywhere
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (global-hl-line-mode 1)
  (set-face-attribute 'show-paren-match-expression nil :background "yellow")

  ;; http://www.emacswiki.org/emacs/SavePlace
  (save-place-mode 1)
  ;; keep track of saved places in ~/.emacs.d/places
  (setq save-place-file (concat user-emacs-directory "places"))
  (setq save-place-forget-unreadable-files nil)
  ;; load custom files
  (add-to-list 'load-path "~/.emacs.d/custom/")
#+END_SRC
* Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
    :family "JetBrains Mono NL"
    :height 160
    :slant 'normal
    :weight 'normal
    :width 'condensed)
#+END_SRC

* Themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;;(load-theme 'doom-one t)
    (load-theme 'doom-nord-light t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;;(doom-themes-neotree-config)
    ;; or for treemacs users
    ;;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    ;;(doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

* UI
#+BEGIN_SRC emacs-lisp
  (require 'paren)
  (show-paren-mode 1)
  (set-face-foreground 'show-paren-match "black")
  (set-face-background 'show-paren-match "orange")
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
#+END_SRC
* UX
vertico, orderless, savehist, marginalia
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :straight (:files (:defaults "extensions/*"))
    :config
    (vertico-mode))

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package savehist
    :ensure t
    :init (savehist-mode))

  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))

  (use-package all-the-icons
    :ensure t)

  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))

  (use-package smartparens
      :ensure t
      :init (require 'smartparens-config)
      :hook (clojure-mode . smartparens-strict-mode))

  (use-package rainbow-delimiters
    :ensure t
    :hook (clojure-mode . rainbow-delimiters-mode))

  (use-package aggressive-indent
    :ensure t
    :hook (clojure-mode . aggressive-indent-mode))

#+END_SRC
* Modeline
#+BEGIN_SRC emacs-lisp
    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1)
      :config
      (setq doom-modeline-height 50)
      (setq doom-modeline-hud nil)
      (setq doom-modeline-project-detection 'auto)
      (setq doom-modeline-icon t)
      (setq doom-modeline-major-mode-icon t)
      (setq doom-modeline-major-mode-color-icon t)
      (setq doom-modeline-buffer-state-icon t)
      (setq doom-modeline-buffer-modification-icon t)
      (setq doom-modeline-time-icon t)
      (setq doom-modeline-unicode-fallback nil)
      (setq doom-modeline-buffer-name t)
      (setq doom-modeline-highlight-modified-buffer-name t)
      (setq doom-modeline-minor-modes nil)
      (setq doom-modeline-enable-word-count nil)
      (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
      (setq doom-modeline-buffer-encoding t)
      (setq doom-modeline-indent-info nil)
      (setq doom-modeline-checker-simple-format t)
      (setq doom-modeline-number-limit 99)
      (setq doom-modeline-vcs-max-length 20)
      (setq doom-modeline-workspace-name t)
      (setq doom-modeline-lsp t)
      (setq doom-modeline-github nil))
#+END_SRC

* Convenient packages
which-key, org-bullet...

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))

  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* Projectile, prespective

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (setq projectile-completion-system 'default)
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))

  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here

    :init
    (persp-mode)
    (require 'persp-projectile))

  (use-package ripgrep
    :ensure t)
  (use-package projectile-ripgrep
    :ensure t)
#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :defer 1
    :config
    (global-diff-hl-mode 1))

#+END_SRC

* Clojure
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode)
  (require 'clojure-mode-extra-font-locking)
  (use-package cider
    :hook (clojure-mode . cider-mode))

  (use-package clj-refactor
    :after cider
    :hook (clojure-mode . clj-refactor-mode))
#+END_SRC
* Eglot

#+BEGIN_SRC emacs-lisp
    (use-package eglot
      :custom
      (eglot-confirm-server-initiated-edits nil)
      (eglot-connect-timeout 300)
      :config
      (setq eglot-autoshutdown t)
      (setq eglot-confirm-server-initiated-edits nil)
      (setq eglot-autoreconnect t)
      :hook ((clojure-mode . eglot-ensure))
      :bind (("C-c l r r" . eglot-rename)
             ("C-c l f" . eglot-find-declaration)
             ("C-c l a" . eglot-code-actions )
             ("C-c l g" . xref-find-definitions)))

    (use-package company
      :config (setq company-idle-delay 0.5)
      (setq company-show-numbers t)
      (setq company-tooltip-limit 10)
      (setq company-minimum-prefix-length 2)
      (setq company-tooltip-align-annotations t)
      ;; invert the navigation direction if the the completion popup-isearch-match
      ;; is displayed on top (happens near the bottom of windows)
      (setq company-tooltip-flip-when-above t))
      ;;(global-company-mode))

  (use-package corfu
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
        ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
        ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
        ;; (corfu-preview-current nil)    ;; Disable current candidate preview
        ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
        ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
        ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
        ;;        (shell-mode . corfu-mode)
        ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-excluded-modes'.
    :init
    (global-corfu-mode))
#+END_SRC

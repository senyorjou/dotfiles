#+STARTUP: overview
* Id
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Marc Jou"
        user-mail-address "smyslov@gmail.com"
        user-github "https://github.com/senyorjou")
#+END_SRC
* Basics
No backups, linenums...
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq delete-auto-save-files t)
  (global-display-line-numbers-mode)
#+END_SRC
* Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
    :family "Jet Brains Mono NL"
    :height 160
    :slant 'normal
    :weight 'normal
    :width 'condensed)
#+END_SRC

* Themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;;(load-theme 'doom-one t)
    (load-theme 'doom-nord-light t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;;(doom-themes-neotree-config)
    ;; or for treemacs users
    ;;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    ;;(doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC

* UI
vertico, savehist, marginalia, doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :straight (:files (:defaults "extensions/*"))
    :config
    (vertico-mode))

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package savehist
    :ensure t
    :init (savehist-mode))

  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))

  (use-package all-the-icons
    :ensure t)

  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+END_SRC
* Modeline
#+BEGIN_SRC emacs-lisp
    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1)
      :config
      (setq doom-modeline-height 50)
      (setq doom-modeline-hud nil)
      (setq doom-modeline-project-detection 'auto)
      (setq doom-modeline-icon t)
      (setq doom-modeline-major-mode-icon t)
      (setq doom-modeline-major-mode-color-icon t)
      (setq doom-modeline-buffer-state-icon t)
      (setq doom-modeline-buffer-modification-icon t)
      (setq doom-modeline-time-icon t)
      (setq doom-modeline-unicode-fallback nil)
      (setq doom-modeline-buffer-name t)
      (setq doom-modeline-highlight-modified-buffer-name t)
      (setq doom-modeline-minor-modes nil)
      (setq doom-modeline-enable-word-count nil)
      (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
      (setq doom-modeline-buffer-encoding t)
      (setq doom-modeline-indent-info nil)
      (setq doom-modeline-checker-simple-format t)
      (setq doom-modeline-number-limit 99)
      (setq doom-modeline-vcs-max-length 20)
      (setq doom-modeline-workspace-name t)
      (setq doom-modeline-lsp t)
      (setq doom-modeline-github nil))
#+END_SRC

* Convenient packages
which-key, org-bullet...

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))

  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* Projectile :)
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (setq projectile-completion-system 'default)
    (projectile-mode +1)
    :bind (:map projectile-mode-map
		("C-c p" . projectile-command-map)))
#+END_SRC


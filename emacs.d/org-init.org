#+STARTUP: overview
* Id
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Marc Jou"
        user-mail-address "smyslov@gmail.com"
        user-github "https://github.com/senyorjou")
#+END_SRC
* Basics
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq delete-auto-save-files t)
  ;; clean whitespace
  (add-hook 'before-save-hook 'whitespace-cleanup)
  ;; truncate lines
  (set-default 'truncate-lines t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode 1)

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; ESC as a better C-g
  ;;(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; line numbers
  (global-display-line-numbers-mode 1)
  ;; but not everywhere
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (global-hl-line-mode 1)
  (set-face-attribute 'show-paren-match-expression nil :background "yellow")

  ;; http://www.emacswiki.org/emacs/SavePlace
  (save-place-mode 1)
  ;; keep track of saved places in ~/.emacs.d/places
  (setq save-place-file (concat user-emacs-directory "places"))
  (setq save-place-forget-unreadable-files nil)

  ;; Auto revert files when they change
  (global-auto-revert-mode t)
  ;; overwrite selection
  (delete-selection-mode 1)
  ;; Also auto refresh dired, but be quiet about it
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)

  ;; load custom files
  (add-to-list 'load-path "~/.emacs.d/custom/")
#+END_SRC
* Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
    :family "JetBrains Mono NL"
    :height 160
    :slant 'normal
    :weight 'normal
    :width 'condensed)
#+END_SRC

* Themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;;(load-theme 'doom-one t)
    (load-theme 'doom-nord-light t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;;(doom-themes-neotree-config)
    ;; or for treemacs users
    ;;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    ;;(doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

* UI
#+BEGIN_SRC emacs-lisp
  (require 'paren)
  (show-paren-mode 1)
  (set-face-foreground 'show-paren-match "black")
  (set-face-background 'show-paren-match "orange")
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
#+END_SRC
* UX
vertico, orderless, savehist, marginalia
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :straight (:files (:defaults "extensions/*"))
    :config
    (vertico-mode))

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package savehist
    :ensure t
    :init (savehist-mode))

  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))

  (use-package all-the-icons
    :ensure t)

  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))

  (use-package smartparens
      :ensure t
      :init (require 'smartparens-config)
      :hook (clojure-mode . smartparens-strict-mode))

  (use-package rainbow-delimiters
    :ensure t
    :hook (clojure-mode . rainbow-delimiters-mode))

  (use-package aggressive-indent
    :ensure t
    :hook (clojure-mode . aggressive-indent-mode))

#+END_SRC
* Consult
#+BEGIN_SRC emacs-lisp
  (require 'cl-macs)
  (use-package consult
    :ensure t
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    ;; ENABLE
    ;;(advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    ;; ENABLE
    ;;(setq xref-show-xrefs-function #'consult-xref
    ;;      xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    ;; ENABLE
    ;; (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; ENABLE
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
  )
#+END_SRC
* Modeline
#+BEGIN_SRC emacs-lisp
    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1)
      :config
      (setq doom-modeline-height 50)
      (setq doom-modeline-hud nil)
      (setq doom-modeline-project-detection 'auto)
      (setq doom-modeline-icon t)
      (setq doom-modeline-major-mode-icon t)
      (setq doom-modeline-major-mode-color-icon t)
      (setq doom-modeline-buffer-state-icon t)
      (setq doom-modeline-buffer-modification-icon t)
      (setq doom-modeline-time-icon t)
      (setq doom-modeline-unicode-fallback nil)
      (setq doom-modeline-buffer-name t)
      (setq doom-modeline-highlight-modified-buffer-name t)
      (setq doom-modeline-minor-modes nil)
      (setq doom-modeline-enable-word-count nil)
      (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
      (setq doom-modeline-buffer-encoding t)
      (setq doom-modeline-indent-info nil)
      (setq doom-modeline-checker-simple-format t)
      (setq doom-modeline-number-limit 99)
      (setq doom-modeline-vcs-max-length 20)
      (setq doom-modeline-workspace-name t)
      (setq doom-modeline-lsp t)
      (setq doom-modeline-github t))
#+END_SRC

* Convenient packages
which-key, org-bullet...

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))

  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* Projectile, prespective

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (setq projectile-completion-system 'default)
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))

  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here

    :init
    (persp-mode)
    (require 'persp-projectile))

  (use-package ripgrep
    :ensure t)
  (use-package projectile-ripgrep
    :ensure t)
#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :defer 1
    :config
    (global-diff-hl-mode 1))
  (use-package magit
    :ensure t)
    ;;:bind (("C-x g" . magit)))
#+END_SRC

* Clojure
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode)
  (require 'clojure-mode-extra-font-locking)
  (use-package cider
    :hook (clojure-mode . cider-mode))

  (use-package clj-refactor
    :after cider
    :hook (clojure-mode . clj-refactor-mode))
#+END_SRC
* Eglot
#+BEGIN_SRC emacs-lisp
    (use-package eglot
      :custom
      (eglot-confirm-server-initiated-edits nil)
      (eglot-connect-timeout 300)
      :config
      (setq eglot-autoshutdown t)
      (setq eglot-confirm-server-initiated-edits nil)
      (setq eglot-autoreconnect t)
      :hook ((clojure-mode . eglot-ensure))
      :bind (("C-c l r r" . eglot-rename)
             ("C-c l f" . eglot-find-declaration)
             ("C-c l a" . eglot-code-actions )
             ("C-c l g" . xref-find-definitions)))

    (use-package company
      :config (setq company-idle-delay 0.5)
      (setq company-show-numbers t)
      (setq company-tooltip-limit 10)
      (setq company-minimum-prefix-length 2)
      (setq company-tooltip-align-annotations t)
      ;; invert the navigation direction if the the completion popup-isearch-match
      ;; is displayed on top (happens near the bottom of windows)
      (setq company-tooltip-flip-when-above t))
      ;;(global-company-mode))

  (use-package corfu
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
        ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
        ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
        ;; (corfu-preview-current nil)    ;; Disable current candidate preview
        ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
        ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
        ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
        ;;        (shell-mode . corfu-mode)
        ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-excluded-modes'.
    :init
    (global-corfu-mode))
#+END_SRC
* Docker, yaml, Rest
#+BEGIN_SRC emacs-lisp
  (require 'dockerfile-mode)
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (use-package restclient
    :ensure t)
#+END_SRC
* Vterm
#+BEGIN_SRC emacs-lisp
    (use-package vterm
      :ensure t)

#+END_SRC
* Open-ai
#+BEGIN_SRC emacs-lisp
  (straight-use-package
   '(org-ai :type git :host github :repo "rksm/org-ai"
            :local-repo "org-ai"
            :files ("*.el" "README.md" "snippets")))

  (use-package org-ai
    :ensure t
    :commands (org-ai-mode)
    :custom
    (org-ai-openai-api-token (getenv "OPEN_AI_TOKEN"))
    :init
    (add-hook 'org-mode-hook #'org-ai-mode))

#+END_SRC
